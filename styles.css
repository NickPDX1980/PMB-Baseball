<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fielding Stats - Parkrose MS Baseball</title>
    <link rel="stylesheet" href="styles.css"> </head>
<body>

    <h1>Fielding Statistics</h1>

    <table>
        <thead>
            <tr>
                <th>Player Name</th>
                <th>POS</th><th>G</th><th>TC</th><th>PO</th>
                <th>A</th><th>E</th><th>DP</th><th>FPCT</th>
            </tr>
        </thead>
        <tbody id="fielding-tbody">
            <tr><td colspan="9">Loading stats...</td></tr> </tbody>
    </table>
     <div id="error-container"></div> <a href="index.html" class="nav-link">&laquo; Back to Home</a>

    <script>
        // --- Copy the SAME loadCsvData function from batting.html here ---
         async function loadCsvData(csvFilename, tbodyId, errorContainerId, expectedColumns) {
            const tbody = document.getElementById(tbodyId);
            const errorContainer = document.getElementById(errorContainerId);
            tbody.innerHTML = `<tr><td colspan="${expectedColumns}">Loading stats...</td></tr>`;
            errorContainer.innerHTML = '';

            try {
                const response = await fetch(csvFilename);
                if (!response.ok) {
                   throw new Error(`Network response was not ok: ${response.statusText} (Status: ${response.status}). Check if the file '${csvFilename}' exists in the same folder as the HTML file.`);
                }
                const csvData = await response.text();
                const lines = csvData.trim().split('\\n');

                 if (lines.length <= 1) {
                    tbody.innerHTML = `<tr><td colspan="${expectedColumns}">No data found in CSV file.</td></tr>`;
                    return;
                }

                tbody.innerHTML = '';

                for (let i = 1; i < lines.length; i++) {
                    const values = lines[i].split(',');
                     if (values.length < expectedColumns) {
                        console.warn(`Row ${i+1} has fewer columns (${values.length}) than expected (${expectedColumns}). Skipping row.`);
                        continue;
                    }

                    const row = document.createElement('tr');
                     for (let j = 0; j < expectedColumns; j++) {
                        const cell = document.createElement('td');
                        cell.textContent = values[j] ? values[j].trim() : '';
                        row.appendChild(cell);
                    }
                    tbody.appendChild(row);
                }

            } catch (error) {
                console.error('Error loading or parsing CSV:', error);
                 tbody.innerHTML = '';
                errorContainer.innerHTML = `<p class="error-message">Error loading stats: ${error.message}</p>`;
            }
        }

        // Run the function for this page
        document.addEventListener('DOMContentLoaded', () => {
            loadCsvData('fielding stats.csv', 'fielding-tbody', 'error-container', 9); // 9 = number of columns in fielding table
        });
    </script>

</body>
</html>